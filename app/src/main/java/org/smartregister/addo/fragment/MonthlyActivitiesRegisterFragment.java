package org.smartregister.addo.fragment;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import androidx.annotation.LayoutRes;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import androidx.fragment.app.FragmentManager;import androidx.fragment.app.FragmentTransaction;import org.smartregister.addo.R;import org.smartregister.addo.contract.MonthlyActivitiesFragmentContract;import org.smartregister.addo.custom_views.NavigationMenu;import org.smartregister.addo.model.MonthlyActivityRegisterFragmentModel;import org.smartregister.addo.presenter.MonthlyActivityRegisterFragmentPresenter;import org.smartregister.commonregistry.CommonPersonObjectClient;import org.smartregister.view.customcontrols.CustomFontTextView;import org.smartregister.view.customcontrols.FontVariant;import org.smartregister.view.fragment.BaseRegisterFragment;import java.util.HashMap;import java.util.Set;public class MonthlyActivitiesRegisterFragment extends BaseRegisterFragment implements MonthlyActivitiesFragmentContract.View {    public MonthlyActivitiesRegisterFragment(){}    @Override    public void setupViews(View view) {        this.rootView = view;        Toolbar toolbar = view.findViewById(org.smartregister.R.id.register_toolbar);        toolbar.setContentInsetsAbsolute(0, 0);        toolbar.setContentInsetsRelative(0, 0);        toolbar.setContentInsetStartWithNavigation(0);        NavigationMenu.getInstance(getActivity(), null, toolbar);        View navbarContainer = view.findViewById(R.id.register_nav_bar_container);        navbarContainer.setFocusable(false);        qrCodeScanImageView = (ImageView)view.findViewById(R.id.scanQrCode);        if (qrCodeScanImageView != null) {            qrCodeScanImageView.setVisibility(View.GONE);        }        View searchBarLayout = view.findViewById(R.id.search_bar_layout);        searchBarLayout.setBackgroundResource(R.color.customAppThemeBlue);        if (getSearchView() != null) {            getSearchView().setBackgroundResource(R.color.white);            getSearchView().setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_action_search, 0, 0, 0);        }        searchBarLayout.setVisibility(View.GONE);        TextView filterView = (TextView)view.findViewById(R.id.filter_text_view);        if (filterView != null) {            filterView.setText(this.getString(R.string.sort));            filterView.setVisibility(View.GONE);        }        ImageView logo = (ImageView)view.findViewById(R.id.opensrp_logo_image_view);        if (logo != null) {            logo.setVisibility(View.GONE);        }        CustomFontTextView titleView = (CustomFontTextView)view.findViewById(R.id.txt_title_label);        if (titleView != null) {            titleView.setVisibility(View.VISIBLE);            titleView.setText(this.getString(R.string.monthly_activity));            titleView.setFontVariant(FontVariant.REGULAR);        }        if (clientsView != null)            clientsView.setVisibility(View.GONE);        headerTextDisplay = view.findViewById(R.id.header_text_display);        filterStatus = view.findViewById(R.id.filter_status);        filterRelativeLayout = view.findViewById(R.id.filter_display_view);        syncProgressBar = view.findViewById(R.id.sync_progress_bar);        syncButton = view.findViewById(R.id.sync_refresh);        headerTextDisplay.setVisibility(View.GONE);        filterStatus.setVisibility(View.GONE);        filterRelativeLayout.setVisibility(View.GONE);        syncButton.setVisibility(View.GONE);    }    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View view = inflater.inflate(getLayout(), container, false);        Toolbar toolbar = view.findViewById(R.id.register_toolbar);        AppCompatActivity activity = ((AppCompatActivity) getActivity());        activity.setSupportActionBar(toolbar);        activity.getSupportActionBar().setTitle(activity.getIntent().getStringExtra(TOOLBAR_TITLE));        activity.getSupportActionBar().setDisplayHomeAsUpEnabled(false);        activity.getSupportActionBar().setLogo(R.drawable.round_white_background);        activity.getSupportActionBar().setDisplayUseLogoEnabled(false);        activity.getSupportActionBar().setDisplayShowTitleEnabled(false);        this.rootView = view;//handle to the root        this.setupViews(view);        return view;    }    @Override    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {        //super.onViewCreated(view, savedInstanceState);        FragmentTransaction t = getActivity().getSupportFragmentManager().beginTransaction();        MonthlyIndicatorsDashboard dashboard = new MonthlyIndicatorsDashboard();        t.replace(R.id.dashboard_fragment, dashboard);        t.addToBackStack(null);        t.commit();    }    @Override    protected void initializePresenter() {        if (this.getActivity() != null){            this.presenter = new MonthlyActivityRegisterFragmentPresenter(this, new MonthlyActivityRegisterFragmentModel(), (String)null);        }    }    @Override    public void setTotalPatients() {    }    @Override    public void initializeAdapter(Set<org.smartregister.configurableviews.model.View> visibleColumns) {    }    @Override    public MonthlyActivitiesFragmentContract.Presenter presenter() {        return (MonthlyActivitiesFragmentContract.Presenter)this.presenter;    }    @Override    public void setUniqueID(String s) {        if (this.getSearchView() != null) {            this.getSearchView().setText(s);        }    }    @Override    public void setAdvancedSearchFormData(HashMap<String, String> hashMap) {    }    @Override    protected String getMainCondition() {        return this.presenter().getMainCondition();    }    @Override    protected String getDefaultSortQuery() {        return this.presenter().getDefaultSortQuery();    }    @Override    protected void startRegistration() {    }    @Override    protected void onViewClicked(View view) {        if (this.getActivity() != null) {            if (view.getTag() instanceof CommonPersonObjectClient && view.getTag(R.id.VIEW_ID) == "click_view_normal") {                this.openProfile((CommonPersonObjectClient)view.getTag());            }        }    }    @LayoutRes    protected int getLayout() {        return R.layout.monthly_activities_fragment;    }    protected void openProfile(CommonPersonObjectClient client) {    }    protected void openFollowUpVisit(CommonPersonObjectClient client) {    }    @Override    public void showNotFoundPopup(String s) {    }}